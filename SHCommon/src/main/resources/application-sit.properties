##############################
#### @Author Sanjeev Kumar ###
#### @Date 19/07/2024      ###
##############################

log.path=/logs/ShareHolder
spring.mvc.throwExceptionIfNoHandlerFound = true

#logging.level.org.springframework.web=INFO
logging.level.org.hibernate=ERROR
#logging.level.net.guides=DEBUG

nse.api.jwtSecret = 357638792F423F4428472B4B6250655368566D597133743677397A2443264629
### 60 seconds = 60000 mili sec

#Set it in minutes 
nse.api.jwtExpirationInMin = 30
#Set it for 24 hours
nse.api.jwtRefreshExpirationInMin = 1440


# ===============================
# Infobip Keys 
# ===============================

infobip.API_KEY = 6908b0b253311620e77f44e15ec7a24a-932fc807-c4db-4e23-b0b9-030283b21e16
infobip.BASE_URL = https://e1lky1.api.infobip.com

infobip.mailSubject = OTPEmailVerification
infobip.projectName = Shareholding


# ===============================
# DATASOURCE
# =============================== 
 
# DataSource (ShareHolding System).
 
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://localhost:5432/ShareHolder?currentSchema=public
spring.datasource.username=postgres
spring.datasource.password=postgres
 
# ===============================
# JPA / HIBERNATE
# ===============================
spring.jpa.generate-ddl=true
#spring.jpa.properties.hibernate.current_session_context_class.acl=org.springframework.orm.hibernate5.SpringSessionContext
hibernate.format_sql=true
# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update, none)
spring.jpa.hibernate.ddl-auto = none

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager)

# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect

# ===============================
# HikariCP settings
# spring.datasource.hikari.*
# ===============================
# Hikari will use the above plus the following to setup connection pooling
spring.datasource.hikari.minimumIdle=5
spring.datasource.hikari.maximumPoolSize=20
spring.datasource.hikari.idleTimeout=30000
spring.datasource.hikari.poolName=SHareHolding_JPAHikariCP
spring.datasource.hikari.maxLifetime=2000000
spring.datasource.hikari.connectionTimeout=30000

# Without below HikariCP uses deprecated com.zaxxer.hikari.hibernate.HikariConnectionProvider
# Surprisingly enough below ConnectionProvider is in hibernate-hikaricp dependency and not hibernate-core
# So you need to pull that dependency but, make sure to exclude it's transitive dependencies or you will end up 
# with different versions of hibernate-core 
spring.jpa.hibernate.connection.provider_class=org.hibernate.hikaricp.internal.HikariCPConnectionProvider

# JPA specific configs
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.use_sql=true
spring.jpa.properties.hibernate.id.new_generator_mappings=false
spring.jpa.properties.hibernate.default_schema=dbschema
spring.jpa.properties.hibernate.search.autoregister_listeners=false
spring.jpa.properties.hibernate.bytecode.use_reflection_optimizer=false

# Enable logging to verify that HikariCP is used, the second entry is specific to HikariCP
logging.level.org.hibernate.SQL=DEBUG
logging.level.com.zaxxer.hikari.HikariConfig=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE 


